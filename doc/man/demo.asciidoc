demo(1)
=======

NAME
----
demo - run media delivery demo

SYNOPSIS
--------
[verse]
'demo' [<options>] [<command> [<args>]]

DESCRIPTION
-----------
`demo` is a helper script to operate media delivery demo.

If <command> is not specified, it starts nginx server and awaits external incoming
client requests. Issue the one requesting playback via vlc from the host or some other
system on the network:

------------
   vlc http://localhost:8080/<stream>/index.m3u8
------------
or capturing via ffmpeg:
------------
   ffmpeg -i http://localhost:8080/<stream>/index.m3u8 -c copy /tmp/output.mkv
------------

'streams' command returns list of streams available for playback and exits.

'ffmpeg' command toggles ffmpeg demo mode which runs ffmpeg client within the container.
No interaction from host or other system is required. Example:
------------
   $ demo ffmpeg <stream>
------------

`-<n>` option is useful for demo purposes. With it solution pretends to have <n> copies of
each input stream. Execute 'demo -4 streams' to explore the difference.

NETWORK PORTS
-------------
8080::
	Port used by nginx server to expose HLS streams. You might wish to
	publish this port out of docker container to be able to connect
	external clients to get HLS server. Use `-p 8080:8080` option for
	`docker run`.

1234::
	Port used by simple socat server capable to execute incoming bash
	scripts. Nginx uses this server to schedule transcoding tasks for
	the incoming HLS requests. For this demo this is internal port and
	there is no need to publish it out of container. However, in real
	deployments you will likely wish to scale the solution and move
	socat server (or some other server with the same purpose) to a
	separate container (which likely will run on separate GPU-capbable
	machine). In such a case you eventually will need to publish the
	port.

OPTIONS
-------
--help::
	Print help

-<n>::
	Pretend to have <n> additional copies of each input stream (n <= 50)

COMMANDS
-------
ffmpeg::
	Toggle ffmpeg demo mode

help::
	Print help on specified topic. Try 'demo help <command>'.

streams::
	Print available streams

ENVIRONMENT VARIABLES
---------------------

DEVICE::
	GPU device to run the demo on. Default device is '/dev/dri/renderD128'.
	Can be overwritten by externally set environment variable.

SEE ALSO
--------
link:demo-alive.asciidoc[demo-alive]
link:demo-ffmpeg.asciidoc[demo-ffmpeg]
link:demo-help.asciidoc[demo-help]
link:demo-streams.asciidoc[demo-streams]
