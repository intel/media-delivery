#!/bin/bash
#
# Copyright (c) 2020 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

if [[ ! ( -n "$DEVICE" && "$DEVICE" =~ /dev/dri/ && -e $DEVICE ) ]]; then
  echo "error: device not availabe: $DEVICE"
  exit -1
fi

video_grps=($(ls -g /dev/dri/renderD* | awk '{print $3}' | uniq))

if [ ${#video_grps[@]} -eq 0 ]; then
  echo "error: no render node GPU devices exposed" >&2
  echo "error:   if you run under docker you might need to map devices" >&2
  echo "error:   with commands like --device=/dev/dri or --privileged" >&2
  exit -1
fi

function add_users_to_group()
{
  grp=$1
  shift
  for usr in $@; do
    if ! sudo usermod -aG $grp $usr; then
      echo "error: failed to add user to '$grp' group: $usr" >&2
      exit -1
    fi
  done
}

n=0
for grp in ${video_grps[@]}; do
  grpname=$grp
  if ! grep "^$grp:" /etc/group >/dev/null; then
    # Having no group in /etc/group means that we get GID instead
    # of group name and group name is absent on this system (which
    # is usual case runnning under docker). So, we just need to
    # create the group.
    grpname=mds_render$n
    if ! sudo groupadd -g $grp $grpname; then
      echo "error: failed to create '$grpname' corresponding to GID: $grp" >&2
      exit -1
    fi
    n=$((++n))
  fi
  add_users_to_group $grpname user www-data
done

content=/opt/data/content
artifacts=/opt/data/artifacts
hls=/var/www/hls

function get_perm() {
  if [ "$1" = "r" ]; then
    echo "reading"
  elif [ "$1" = "w" ]; then
    echo "writing"
  else
    echo "bug: script does not support specified permission: $1" >&2
  fi
}

function print_error() {
  folder=$1
  perm=$2
  user=$3
  echo "error: can't access $folder for $(get_perm $perm) (user '$user')" >&2
  echo "error:   if you attempt to map a host folder under docker" >&2
  echo "error:   you might need to adjust its access permissions on a host side" >&2
}

function check_access() {
  folder=$1
  perm=$2
  shift 2
  users=$@
  for u in $users; do
    if ! sudo -u $u test -$perm $folder; then
      print_error $folder $perm $u
      exit -1
    fi
  done
}

# verifying access rights to input/output folders
check_access $content "r" user www-data
# demo scripts write logs and some output files (captured streaming
# video) to $artifacts folder, and scripts also read and parse logs
# to display monitoring statistics
check_access $artifacts "r" user www-data
check_access $artifacts "w" user www-data

# cleaning up any prev. artifacts
sudo rm -rf $artifacts/*

# demo writes streaming video to $hls folder (and we need write permissions
# for www-data)
check_access $hls "r" user www-data
check_access $hls "w" www-data

# Enable perf events for all users, we need access to global events
# to dump GPU utilization stats. Actually this can be done by different ways
# and you see below one of them. Another one would be to grant CAP_SYS_ADMIN
# capability to user and/or application(s) which need access to global
# events.
echo -1 | sudo tee /proc/sys/kernel/perf_event_paranoid >/dev/null
