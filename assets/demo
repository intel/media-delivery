#!/bin/bash

n_pretend_max=50

function print_help() {
  echo "Usage: demo [<options>] [<command> [<args>]]"
  echo ""
  echo "Options:"
  echo "  --help      Print this help"
  echo "  -<n>        Pretend to have <n> additional copies of each input stream (n <= $n_pretend_max)"
  echo ""
  echo "Commands:"
  echo "  ffmpeg      Toggle ffmpeg demo mode"
  echo "  help        Print help on specified topic"
  echo "  streams     Print available streams"
  echo ""
  echo "See 'demo help <command>' to read about specific command."
  echo ""
  echo "Description:"
  echo "If command is not specified, it starts nginx server and awaits external incoming client"
  echo "requests. Issue the one requesting playback via vlc from the host or some other"
  echo "system on the network:"
  echo "   $ vlc http://localhost:8080/live/<stream>"
  echo "or capturing via ffmpeg:"
  echo "   $ ffmpeg -i http://localhost:8080/live/<stream> -c copy /tmp/output.mkv"
  echo ""
  echo "'streams' command returns list of streams available for playback and exits."
  echo ""
  echo "'ffmpeg' command toggles ffmpeg demo mode which runs ffmpeg client within the container."
  echo "No interaction from host or other system is required. Example:"
  echo "   $ demo ffmpeg <stream>"
  echo ""
  echo "'-<n>' option is useful for demo purposes. With it solution pretends to have <n> copies of"
  echo "each input stream. Execute 'demo -4 streams' to explore the difference."
}

function print_help__streams() {
  echo "Usage: demo streams"
}

function print_help__ffmpeg() {
  echo "Usage: demo ffmpeg <stream> [<stream>]"
  echo ""
  echo "Description:"
  echo "Request streaming from within the container by ffmpeg. ffmpeg will catch"
  echo "streaming video and dump it to the disk."
}

function print_command_help() {
  if [ $# -eq 0 ]; then
    print_help
    exit 0
  fi
  topic=$1
  if [ "$topic" = "streams" ]; then
    print_help__streams
  elif [ "$topic" = "ffmpeg" ]; then
    print_help__ffmpeg
  else
    echo "error: unknown command: '$topic'"
    print_help
    exit -1
  fi
  exit 0
}

command=$1
shift;

n_pretend=0

if [ "$command" = "--help" ]; then
  print_help
  exit 0
elif [[ "$command" =~ ^-([0-9])+$ ]]; then
  n_pretend=${BASH_REMATCH[1]}
  if [ $n_pretend -gt $n_pretend_max ]; then
    echo "error: '-n' option: too big value: $n_pretend"
    exit -1
  fi

  command=$1
  shift;
fi

if [ $n_pretend -gt 0 ]; then
  sudo mkdir /opt/data/duplicates
  for stream in `ls -1 /opt/data/content/*.mp4 2>/dev/null`; do
    name=$(basename -- "$stream")
    extension="${name##*.}"
    name="${name%.*}"
    for n in `seq 1 $n_pretend`; do
      sudo ln -s $stream /opt/data/duplicates/$name-$n.$extension
    done
  done
  for stream in `ls -1 /opt/data/embedded/*.mp4 2>/dev/null`; do
    name=$(basename -- "$stream")
    extension="${name##*.}"
    name="${name%.*}"
    for n in `seq 1 $n_pretend`; do
      if [ ! -e $name-$n.$extension ]; then
        sudo ln -s $stream /opt/data/duplicates/$name-$n.$extension
      fi
    done
  done
fi

if [ "$command" = "help" ]; then
  print_command_help $@
  exit 0
elif [ "$command" = "streams" ]; then
  if [ $# -gt 0 ]; then
    echo "error: too many arguments: $@"
    print_help__streams
    exit -1
  fi
  echo "Your content (has preference over embedded content):"
  your_content=`ls -1 /opt/data/content/*.mp4 2>/dev/null`
  if [ "$your_content" = "" ]; then
    echo "  none"
  else
    for stream in $your_content; do
      name=$(basename -- "$stream")
      name="${name%.*}"
      echo "  $name | http://localhost:8080/live/$name/index.m3u8"
    done
  fi
  echo
  echo "Container embedded content:"
  for stream in `ls -1 /opt/data/embedded/*.mp4`; do
    name=$(basename -- "$stream")
    name="${name%.*}"
    echo "  $name | http://localhost:8080/live/$name/index.m3u8"
  done
  echo
  duplicates=`ls -1 /opt/data/duplicates/*.mp4 2>/dev/null`
  if [ "$duplicates" != "" ]; then
    echo "Stream duplicates:"
    for stream in $duplicates; do
      name=$(basename -- "$stream")
      name="${name%.*}"
      echo "  $name | http://localhost:8080/live/$name/index.m3u8"
    done
  fi
  exit 0
elif [ "$command" = "ffmpeg" ]; then
  if [ $# -eq 0 ]; then
    echo "error: no streams specified"
    print_help__ffmpeg
    exit -1
  fi
  streams=($@)
  for stream in ${streams[@]}; do
    if [ ! -f /opt/data/content/$stream.mp4 -a \
         ! -f /opt/data/embedded/$stream.mp4 -a \
         ! -f /opt/data/duplicates/$stream.mp4 ]; then
      echo "error: no such file to play: '$stream'"
      exit -1
    fi
  done
  client="ffmpeg-capture-hls.sh $streams"
elif [ "$command" != "" ]; then
  echo "error: unknown command or option: '$command'"
  print_help
  exit -1
fi

{
  echo "new-session /usr/bin/bash -c \"$client\""
  echo "split-window -v sudo intel_gpu_top"
  echo "split-window -v top"
  echo "split-window -v" # TODO dump server and transcoding statistics
  echo "select-layout tiled"
} >> /home/user/.tmux.conf

sudo nginx

tmux attach
