#!/bin/bash
#
# Copyright (c) 2020 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

n_pretend_max=50

function print_help() {
  echo "Usage: demo [<options>] [<command> [<args>]]"
  echo ""
  echo "Options:"
  echo "  --help      Print this help"
  echo "  -<n>        Pretend to have <n> additional copies of each input stream (n <= $n_pretend_max)"
  echo ""
  echo "Commands:"
  echo "  ffmpeg      Toggle ffmpeg demo mode"
  echo "  help        Print help on specified topic"
  echo "  streams     Print available streams"
  echo ""
  echo "See 'demo help <command>' to read about specific command."
  echo ""
  echo "Description:"
  echo "If command is not specified, it starts nginx server and awaits external incoming client"
  echo "requests. Issue the one requesting playback via vlc from the host or some other"
  echo "system on the network:"
  echo "   $ vlc http://localhost:8080/<stream>/index.m3u8"
  echo "or capturing via ffmpeg:"
  echo "   $ ffmpeg -i http://localhost:8080/<stream>/index.m3u8 -c copy /tmp/output.mkv"
  echo ""
  echo "'streams' command returns list of streams available for playback and exits."
  echo ""
  echo "'ffmpeg' command toggles ffmpeg demo mode which runs ffmpeg client within the container."
  echo "No interaction from host or other system is required. Example:"
  echo "   $ demo ffmpeg <stream>"
  echo ""
  echo "'-<n>' option is useful for demo purposes. With it solution pretends to have <n> copies of"
  echo "each input stream. Execute 'demo -4 streams' to explore the difference."
}

function print_help__streams() {
  echo "Usage: demo streams"
}

function print_help__ffmpeg() {
  echo "Usage: demo ffmpeg [<options>] <stream> [<stream>]"
  echo ""
  echo "Options"
  echo "  --exit Exit from the demo once all streams will be completed on client side"
  echo ""
  echo "Description:"
  echo "Request streaming from within the container by ffmpeg. ffmpeg will catch"
  echo "streaming video and dump it to the disk."
}

function print_command_help() {
  if [ $# -eq 0 ]; then
    print_help
    exit 0
  fi
  topic=$1
  if [ "$topic" = "streams" ]; then
    print_help__streams
  elif [ "$topic" = "ffmpeg" ]; then
    print_help__ffmpeg
  else
    echo "error: unknown command: '$topic'"
    print_help
    exit -1
  fi
  exit 0
}

command=$1
shift;

n_pretend=0

if [ "$command" = "--help" ]; then
  print_help
  exit 0
elif [[ "$command" =~ ^-([0-9]+)$ ]]; then
  n_pretend=${BASH_REMATCH[1]}
  if [ $n_pretend -gt $n_pretend_max ]; then
    echo "error: '-n' option: too big value: $n_pretend"
    exit -1
  fi

  command=$1
  shift;
fi

if [ $n_pretend -gt 0 ]; then
  sudo mkdir /opt/data/duplicates
  for stream in `ls -1 /opt/data/content/*.mp4 2>/dev/null`; do
    name=$(basename -- "$stream")
    extension="${name##*.}"
    name="${name%.*}"
    for n in `seq 1 $n_pretend`; do
      sudo ln -s $stream /opt/data/duplicates/$name-$n.$extension
    done
  done
  for stream in `ls -1 /opt/data/embedded/*.mp4 2>/dev/null`; do
    name=$(basename -- "$stream")
    extension="${name##*.}"
    name="${name%.*}"
    for n in `seq 1 $n_pretend`; do
      if [ ! -e $name-$n.$extension ]; then
        sudo ln -s $stream /opt/data/duplicates/$name-$n.$extension
      fi
    done
  done
fi

_exit=0

if [ "$command" = "help" ]; then
  print_command_help $@
  exit 0
elif [ "$command" = "streams" ]; then
  if [ $# -gt 0 ]; then
    echo "error: too many arguments: $@"
    print_help__streams
    exit -1
  fi

  function print_streams() {
    name=$1
    types=$(echo $DEMO_STREAM_TYPES | sed 's/:/ /')
    for type in $types; do
      echo "$type/$name | http://localhost:8080/$type/$name/index.m3u8"
    done
  }

  echo "Your content (has preference over embedded content):"
  your_content=`ls -1 /opt/data/content/*.mp4 2>/dev/null`
  if [ "$your_content" = "" ]; then
    echo "  none"
  else
    for stream in $your_content; do
      name=$(basename -- "$stream")
      name="${name%.*}"
      print_streams $name
    done
  fi
  echo
  echo "Container embedded content:"
  for stream in `ls -1 /opt/data/embedded/*.mp4`; do
    name=$(basename -- "$stream")
    name="${name%.*}"
    print_streams $name
  done
  echo
  duplicates=`ls -1 /opt/data/duplicates/*.mp4 2>/dev/null`
  if [ "$duplicates" != "" ]; then
    echo "Stream duplicates:"
    for stream in $duplicates; do
      name=$(basename -- "$stream")
      name="${name%.*}"
      print_streams $name
    done
  fi
  exit 0
elif [ "$command" = "ffmpeg" ]; then
  if [ "$1" = "--exit" ]; then
    shift
    _exit=1
    _opts="--exit"
  fi
  if [ $# -eq 0 ]; then
    echo "error: no streams specified"
    print_help__ffmpeg
    exit -1
  fi
  streams=($@)

  function get_stream_name() {
    local stream=$1
    if echo $stream | grep http; then
      # dealing with "http://localhost:8080/$stream/index.m3u8" beast
      # and we need to get $stream from it
      stream=${stream%/*}        # remove "/index.m3u8"
      stream=${stream#http://*/} # remove "http://<ip>:<port>/"
    fi
    echo $stream
  }

  for stream in ${streams[@]}; do
    # we have streams specified in a from <type>/<name>
    name=$(get_stream_name $stream)
    name=${name##*/}
    if [ ! -f /opt/data/content/$name.mp4 -a \
         ! -f /opt/data/embedded/$name.mp4 -a \
         ! -f /opt/data/duplicates/$name.mp4 ]; then
      echo "error: no such file to play: '$name'"
      exit -1
    fi
  done
  client="ffmpeg-capture-hls.sh $_opts ${streams[@]}";
elif [ "$command" != "" ]; then
  echo "error: unknown command or option: '$command'"
  print_help
  exit -1
fi

function start_nginx() {
  if ! sudo nginx "$@"; then
    echo "error: failed to start nginx (specified options: $@)" >&2
    exit -1
  fi
}

if tty -s; then
  {
    if [ $_exit -eq 1 ]; then
      echo "new-session /usr/bin/bash -c \"$client; tmux kill-session\""
    else
      echo "new-session /usr/bin/bash -c \"$client\""
    fi
    echo "split-window -v sudo intel_gpu_top"
    echo "split-window -v top"
    echo "split-window -v monitor-nginx-server.sh"
    echo "select-layout tiled"
  } >> /home/user/.tmux.conf

  start_nginx
  tmux attach
else
  echo "note: not running under tty"
  goto_tty_note="note:   if you run under docker, consider restarting with '-it' option\n"
  goto_tty_note+="note:   if you will need to terminate demo earlier, lookup for the\n"
  goto_tty_note+="note:   running container with 'docker container ls' followed up by\n"
  goto_tty_note+="note:   'docker container stop <container-id>'\n"

  if [ -n "$client" ]; then
    echo "note: starting up nginx server and specified client"
    echo "note:   full-scale demo mode requires access to terminal"
    echo -ne "$goto_tty_note"
    start_nginx
    $client
  else
    echo "note: starting up nginx server"
    echo "note:   request streaming from host or other system in the network"
    echo -ne "$goto_tty_note"
    start_nginx -g "daemon off;"
  fi
fi
