#
# Copyright (c) 2020 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

user user;
worker_processes auto;
pid /tmp/nginx.pid;

# This line enables additional nginx modules available for install
# via separate packages.
include /etc/nginx/modules-enabled/*.conf;

events {
  worker_connections 1024;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow play all;

        # Creates HLS video stream from the incoming stream(s) and
        # tells where to put the HLS video manifest.
        #
        #  - Incoming stream: rtmp://localhost:1935/<type>/<stream-key>
        #     * if HLS variants are used: rtmp://localhost:1935/<type>/<stream-key>$variant
        #  - Output HLS manifest: $hls_path/<stream-key>/index.m3u8
        #
        # So, someone needs to start writing to the incoming stream to
        # trigger the process. We are doing this below via HTTP hook
        # which gets executed on incoming client request to play video.
        application vod/avc {
            live on;

            hls on;
            hls_nested on;
            hls_path /var/www/hls/vod/avc;
            hls_fragment 4s;

            allow play all;
        }
    }
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    init_by_lua_block {
        os.execute("mkdir -p /var/www/hls/vod");
    }

    server {
        listen 8080;

        # Note: location /<path>
        #
        # Creates HTTP location for our HLS video stream which will
        # be available via: http://localhost:8080/<path>/<stream-key>/index.m3u8

        # Note: nginx-trigger-streaming.sh
        #
        # This is the hook (a shell script) which gets executed on the
        # incoming HTTP request, i.e. when client attempts to access
        # "<path>/<stream-key>/index.m3u8". Once we get such request we
        # trigger the process to run ffmpeg transcoding to generate
        # HLS output stream for us.

        location /vod/avc {
            types {
                application/vnd.apple.mpegurl m3u8;
            }
            alias /var/www/hls/vod/avc;
            add_header Cache-Control no-cache;

            rewrite_by_lua_block {
                os.execute( "/usr/bin/bash -c \"source /etc/demo.env; nginx-trigger-streaming.sh " .. ngx.var.uri .. ";\"")
            }
        }

        #allows us to host some webpages which can show our videos: "http://my-ip/my-page.html"     
#        location / {
#            root   html;
#            index  index.html index.htm;
#        }   
    }
}
