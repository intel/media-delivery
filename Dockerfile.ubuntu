# Copyright (c) 2020 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

FROM ubuntu:20.04 AS base

# Copy helper scripts to base image
COPY scripts /tmp/scripts
COPY assets/setup-apt-proxy /tmp/scripts/

# If you work under proxy, adjust http(s)_proxy invironment variable(s) and
# this script will propagate the enviroment to apt proxies.
RUN /tmp/scripts/setup-apt-proxy

# Now let's setup Intel Graphics repository
RUN apt-get update && \
   apt-get install --no-install-recommends -y sudo ca-certificates \
   && rm -rf /var/lib/apt/lists/*

ARG APT_GRAPHICS_REPO="https://repositories.intel.com/graphics/ubuntu focal main"
RUN { \
  echo "Specified graphics repo: $APT_GRAPHICS_REPO"; \
  if [ -n "$APT_GRAPHICS_REPO" ]; then \
    repo="deb [trusted=yes arch=amd64] $APT_GRAPHICS_REPO"; \
    echo "$repo" > /etc/apt/sources.list.d/intel-graphics.list; \
    cat /etc/apt/sources.list.d/intel-graphics.list; \
  fi; \
}

# This script is a placeholder to further setup the base image.
RUN /tmp/scripts/setup-base-image.sh

# Let's create a user 'user'
RUN groupadd -r user && useradd -lrm -s /bin/bash -g user user

FROM base AS content

RUN apt-get update && apt-get install --no-install-recommends -y \
  wget \
  && rm -rf /var/lib/apt/lists/*

# Refer to usage.txt for the content copyright notice(s)
RUN mkdir /embedded && cd /embedded && \
  wget --progress=bar:force https://repositories.intel.com/media/usage.txt && \
  wget --progress=bar:force https://repositories.intel.com/media/WAR_TRAILER_HiQ_10_withAudio.mp4

FROM base AS build-prerequisites

# For the build layers: add user to sudo group and set 'sudo' to NOPASSWD
RUN usermod -aG sudo user
RUN sed -i -e 's,%sudo.*,%sudo ALL=(ALL) NOPASSWD:ALL,g' /etc/sudoers

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
    asciidoc-base \
    cython3 \
    docbook-xsl \
    gcc \
    g++ \
    git \
    libmfx-dev \
    libva-dev \
    libx264-dev \
    libx265-dev \
    make \
    meson \
    patch \
    pkg-config \
    python3 \
    python3-dev \
    python3-numpy \
    python3-setuptools \
    python3-wheel \
    sudo \
    xsltproc \
    yasm \
  && rm -rf /var/lib/apt/lists/*

FROM build-prerequisites AS build-all

# We will install self-build components at $PREFIX whenever possible
ARG PREFIX=/opt/intel/samples
ARG LIBDIR=$PREFIX/lib
ARG PKG_CONFIG_PATH=$LIBDIR/pkgconfig
COPY patches $PREFIX/patches

USER user

# As of now we need 2 things from VMAF: libvmaf library against which we will link
# ffmpeg and model *.pkl file(s) to be able to calculate VMAF.
ARG VMAF_VERSION=v1.5.2
RUN git clone --depth 1 --branch $VMAF_VERSION https://github.com/Netflix/vmaf.git /home/user/vmaf
RUN { \
  set -ex; \
  cd /home/user/vmaf; \
  while read p; do \
    patch -p1 < $PREFIX/patches/vmaf/$p; \
  done <$PREFIX/patches/vmaf/series; \
}
RUN cd /home/user/vmaf/libvmaf \
  && meson build \
  --buildtype=release \
  --prefix=$PREFIX \
  --libdir=$LIBDIR \
  && ninja -j $(nproc --all) -C build \
  && sudo ninja -C build install

# Here we install VMAF python module. It fetches some dependencies during
# installation and in total footprint is around 300MB. We are trying to
# reduce the footprint taking only vmaf module itself and minimal set of
# dependencies which we really need. Thus, some vmaf python module usage
# scenarious in our final image might not work due to missing dependencies.
RUN cd /home/user/vmaf/python \
    && sudo python3 setup.py bdist_wheel --dist-dir=/opt/wheel

ARG FFMPEG_VERSION=n4.3
RUN git clone --depth 1 --branch $FFMPEG_VERSION https://github.com/ffmpeg/ffmpeg /home/user/ffmpeg
RUN { \
  set -ex; \
  cd /home/user/ffmpeg; \
  while read p; do \
    patch -p1 < $PREFIX/patches/ffmpeg/$p; \
  done <$PREFIX/patches/ffmpeg/series; \
}
RUN cd /home/user/ffmpeg && \
  ./configure \
  --prefix=$PREFIX \
  --disable-static \
  --disable-doc \
  --enable-shared \
  --enable-vaapi \
  --enable-libmfx \
  --enable-gpl \
  --enable-libx264 \
  --enable-libx265 \
  --enable-version3 \
  --enable-libvmaf \
  && make -j $(nproc --all) \
  && sudo make install

# Cleanin up...
RUN rm -rf /home/user/ffmpeg && \
    rm -rf /home/user/patches && \
    sudo rm -rf /home/user/vmaf

FROM build-prerequisites AS build-man

USER user

# Building some manual pages for the sample
ARG PREFIX=/opt/intel/samples
COPY --chown=user doc/man /home/user/mdsman
RUN cd /home/user/mdsman && make -j $(nproc --all) && sudo make prefix=$PREFIX install
RUN rm -rf /home/user/mdsman

# Ok, here goes the final image end-user will actually see
FROM base as runtime

LABEL vendor="Intel Corporation"

# Install runtime environment available in apt repositories
RUN apt-get update && apt-get install -y --no-install-recommends \
    intel-gpu-tools \
    intel-media-va-driver-non-free \
    libigfxcmrt7 \
    libmfx1 \
    libmfx-tools \
    libnginx-mod-http-lua \
    libnginx-mod-rtmp \
    libva-drm2 \
    libva-x11-2 \
    linux-tools-generic \
    man-db \
    nginx \
    pciutils \
    python3 \
    python3-matplotlib \
    python3-numpy \
    python3-pip \
    socat \
    tmux \
    vainfo \
    $(apt-cache depends libx264-dev | grep Depends | grep libx264 | cut -d: -f2) \
    $(apt-cache depends libx265-dev | grep Depends | grep libx265 | cut -d: -f2) \
  && rm -rf /var/lib/apt/lists/*

# Adjusting environment to fix WAs and other limitations:
# * man is excluded from the minimal ubuntu image
# * perf is tight to particular kernel version as an old WA which will never
# be fixed, we just need to use some version
RUN rm -f /usr/bin/man && dpkg-divert --quiet --remove --rename /usr/bin/man
RUN ln -fs `find /usr/lib/linux-tools -name perf` /usr/bin/perf;

# Granting CAP_SYS_ADMIN to the Linux perf to be able to get global perf
# events (specifically: i915 events). Mind that this will work if container
# is started with:
#   --cap-add SYS_ADMIN --security-opt="no-new-privileges:false"
# If it was started with
#   --cap-add SYS_ADMIN --security-opt="no-new-privileges:true"
# then you need to adjust /proc/sys/kernel/perf_event_paranoid on a host to have
# value <=0
RUN setcap cap_sys_admin+ep $(readlink -f $(which perf))
RUN setcap cap_sys_admin+ep $(readlink -f $(which intel_gpu_top))

# This script is a placeholder to further setup the final runtime image.
RUN /tmp/scripts/setup-runtime-image.sh

# Cleaning up
RUN rm -rf /etc/apt/apt.conf
RUN rm -rf /tmp/assets

# Install runtime environment we manually built on 'build' stage
ARG PREFIX=/opt/intel/samples
COPY --from=build-man $PREFIX $PREFIX
COPY --from=build-all $PREFIX $PREFIX
COPY --from=build-all /opt/wheel /opt/wheel
RUN echo "$PREFIX/lib" > /etc/ld.so.conf.d/intel-media-delivery.conf
RUN ldconfig
RUN python3 -m pip install --no-deps --prefix $PREFIX /opt/wheel/* \
  && rm -rf /opt/wheel

# Installing entrypoint helper scripts
COPY assets/demo-alive /usr/bin/
COPY assets/demo-bash /usr/bin/
COPY assets/hello-bash /usr/bin/

FROM runtime
ARG PREFIX=/opt/intel/samples

# Making sample sources available in the final container
COPY . $PREFIX/src/intel-media-delivery

# Making content available in the container
COPY --from=content /embedded /opt/data/embedded

# Creating locations sample will need and giving permissions
# to the default user
RUN mkdir -p /opt/data/content
RUN mkdir -p /opt/data/artifacts && chown user /opt/data/artifacts
RUN mkdir -p /opt/data/duplicates && chown user /opt/data/duplicates
# The following are locations used by nginx to produce HLS streams,
# dump logs, etc.
RUN mkdir -p /var/www/hls && chown user /var/www/hls
RUN chown -R user /var/log/nginx
RUN chown -R user /var/lib/nginx

# Setting up sample
ARG SAMPLE=cdn
RUN cd $PREFIX/src/intel-media-delivery/samples/$SAMPLE && ./setup.sh $PREFIX

# Adjust settings for development type of build
ARG DEVEL=yes
RUN { \
  if [ "$DEVEL" = "yes" ]; then \
    usermod -aG sudo user; \
    sed -i -e 's,%sudo.*,%sudo ALL=(ALL) NOPASSWD:ALL,g' /etc/sudoers; \
  fi; \
  }

# Setting up 'user' environment common for all samples
USER user
WORKDIR /home/user

# Declaring volumes which you might wish to optionally mount
#  * /opt/data/content is where you can put your own content to access from inside
#    the sample demos
#  * /opt/data/artifacts is a location where sample will produce some output
#    artifacts like generated or captured stream and logs. You can wish to twick
#    this location to get artifacts on your host system
#  * /var/www/hls is a location where sample demos will generate HLS streams. You
#    might wish to twick this location to get access to these streams. Mind that
#    this is server side raw HLS stream. If you run some demo client to capture
#    streaming video - look in the /opt/data/artifacts

VOLUME /opt/data/content
VOLUME /opt/data/artifacts
VOLUME /var/www/hls

# Check running container healthy status with:
#  docker inspect --format='{{json .State.Health}}' <container-id>
HEALTHCHECK CMD /usr/bin/demo-alive

# hello-bash is a default command which will be executed by demo-bash if
# user did not provide any arguments starting the container. Basically hello-bash
# will print welcome message and enter regular bash with correct environment.
CMD ["/usr/bin/hello-bash"]

# demo-bash will execute whatever command is provided by the user making
# sure that environment settings are correct.
ENTRYPOINT ["/usr/bin/demo-bash"]
