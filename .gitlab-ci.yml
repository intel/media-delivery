stages:
- trigger
- build
- test

variables:
  MDS_PROJECT_PATH: "vtt/sws/osgc/solutions/intel-media-delivery"
  http_proxy: "http://proxy-chain.intel.com:911"
  https_proxy: "http://proxy-chain.intel.com:911"
  no_proxy: ""

on_mr:
  stage: "trigger"
  script:
  - echo "Triggering MR-$CI_MERGE_REQUEST_IID build"
  - export # TODO delete me, that's debug print to check how we are getting triggerred
  only:
    refs:
    - merge_requests
    variables:
    - $CI_PROJECT_PATH == $MDS_PROJECT_PATH
    - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"

on_merge:
  stage: "trigger"
  script:
  - echo "Triggering on-merge build"
  - export # TODO delete me, that's debug print to check how we are getting triggerred
  only:
    refs:
    - master
    variables:
    - $CI_PROJECT_PATH == $MDS_PROJECT_PATH

on_trigger:
  stage: "trigger"
  script:
  - echo "Building on external trigger event"
  - export # TODO delete me, that's debug print to check how we are getting triggerred
  only:
  - triggers

.trigger_rule:
  rules:
  - if: $CI_PROJECT_PATH == $MDS_PROJECT_PATH && $CI_COMMIT_REF_NAME == "master"
  - if: $CI_PROJECT_PATH == $MDS_PROJECT_PATH && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"

.build_image:
  extends: .trigger_rule
  stage: "build"
  script:
  - tagname="intel-media-delivery-$SOLUTION"
  - if [ -n "$CI_COMMIT_BRANCH" ]; then tagname+="-$CI_COMMIT_BRANCH"; fi
  - if [ -n "$CI_MERGE_REQUEST_IID" ]; then tagname+="-mr$CI_MERGE_REQUEST_IID"; fi
  - echo "Building $tagname docker image"
  - docker build
      $(env | grep -E '_proxy=' | sed 's/^/--build-arg /')
      --build-arg SOLUTION=$SOLUTION
      --no-cache
      --force-rm
      --network=host
      --file Dockerfile.ubuntu
      -t $tagname
      .
  - docker save $tagname | gzip > $tagname.tar.gz
  - echo $tagname > tagname
  - docker rmi --force $(docker images -q $tagname | uniq)
  artifacts:
    paths:
    - tagname
    - "*.tar.gz"
    expire_in: 10 mins
  tags:
  - builder
  - ubuntu

.test_image:
  extends: .trigger_rule
  stage: "test"
  script:
  - tagname=$(cat tagname)
  - echo "Testing $tagname docker image"
  - docker load < $tagname.tar.gz
  - mkdir _logs
  - export MDS_IMAGE=$tagname
  - export MDS_LOGS=`pwd`/_logs
  - export MDS_DEMO=$SOLUTION
  - test_status=0
  - bats tests/demo.bats || test_status=$?
  - docker rmi --force $(docker images -q $tagname | uniq)
  - if [ $test_status -ne 0 ]; then echo "Test failed"; false; fi
  artifacts:
    when: on_failure
    paths:
    - _logs/
    expire_in: 1 day
  tags:
  - ubuntu # bats is available here in our CI deployments
  - gen9

build:cdn:
  extends: .build_image
  variables:
    SOLUTION: cdn

build:edge:
  extends: .build_image
  variables:
    SOLUTION: edge

test:cdn:
  extends: .test_image
  variables:
    SOLUTION: cdn
  dependencies:
  - build:cdn

test:edge:
  extends: .test_image
  variables:
    SOLUTION: edge
  dependencies:
  - build:edge
