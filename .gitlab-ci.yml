stages:
- trigger
- build
- test
- deploy

variables:
  MDS_REGISTRY: "dockerv2-gsae-fm.gfx-assets.fm.intel.com/solutions"
  MDS_PROJECT_PATH: "vtt/sws/osgc/solutions/intel-media-delivery"
  http_proxy: "http://proxy-chain.intel.com:911"
  https_proxy: "http://proxy-chain.intel.com:911"
  no_proxy: ""

on_mr:
  stage: "trigger"
  script:
  - echo "Triggering MR-$CI_MERGE_REQUEST_IID build"
  - export # TODO delete me, that's debug print to check how we are getting triggerred
  only:
    refs:
    - merge_requests
    variables:
    - $CI_PROJECT_PATH == $MDS_PROJECT_PATH
    - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
  tags:
  - builder
  - ubuntu

on_merge:
  stage: "trigger"
  script:
  - echo "Triggering on-merge build"
  - export # TODO delete me, that's debug print to check how we are getting triggerred
  only:
    refs:
    - master
    variables:
    - $CI_PROJECT_PATH == $MDS_PROJECT_PATH
  tags:
  - builder
  - ubuntu

.trigger_rule:
  rules:
  - if: $CI_PROJECT_PATH == $MDS_PROJECT_PATH && $CI_COMMIT_REF_NAME == "master"
  - if: $CI_PROJECT_PATH == $MDS_PROJECT_PATH && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"

.build_image:
  extends: .trigger_rule
  stage: "build"
  script:
  - tagname="$MDS_REGISTRY/intel-media-delivery/$SAMPLE/"
  - if [ -n "$CI_COMMIT_BRANCH" ]; then tagname+="$ORIGIN/stash/$CI_PIPELINE_ID:$FLAVOR"; fi
  - if [ -n "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]; then tagname+="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME/"; fi
  - if [ -n "$CI_MERGE_REQUEST_IID" ]; then tagname+="mr/$CI_MERGE_REQUEST_IID:$FLAVOR"; fi
  - echo "Building $tagname docker image"
  - docker build
      $(env | grep -E '_proxy=' | sed 's/^/--build-arg /')
      --build-arg IMAGE=amr-registry.caas.intel.com/vtt-osgc/os/ubuntu:focal
      --build-arg FLAVOR=$FLAVOR
      --build-arg SAMPLE=$SAMPLE
      --no-cache
      --force-rm
      --file $DOCKERFILE
      -t $tagname
      .
  - docker run -e MDS_IGNORE_ERRORS=yes --rm $tagname dpkg -l >packages 2>/dev/null
  - docker run -e MDS_IGNORE_ERRORS=yes --rm $tagname ffmpeg -version >ffmpeg.version 2>/dev/null
  - docker push $tagname
  - echo $tagname > tagname
  - docker rmi --force $(docker images -q $tagname | uniq)
  artifacts:
    paths:
    - ffmpeg.version
    - packages
    - tagname
  tags:
  - builder
  - ubuntu

.test_image:
  extends: .trigger_rule
  stage: "test"
  script:
  - assets/info
  - tagname=$(cat tagname)
  - echo "Testing $tagname docker image"
  - docker pull $tagname
  - helperimg=amr-registry.caas.intel.com/vtt-osgc/os/ubuntu:focal
  - docker pull $helperimg
  - docker run --rm -v $(pwd):/opt/tmp $helperimg rm -rf /opt/tmp/_logs
  - docker run --rm -v $(pwd):/opt/tmp $helperimg rm -rf /opt/tmp/mds_bats
  - export MDS_IMAGE=$tagname
  - export MDS_LOGS=`pwd`/_logs
  - export MDS_DEMO=$SAMPLE
  - test_status=0
  - bats tests/*.bats || test_status=$?
  - docker run --rm -v $(pwd):/opt/tmp $helperimg rm -rf /opt/tmp/_logs
  - docker run --rm -v $(pwd):/opt/tmp $helperimg rm -rf /opt/tmp/mds_bats
  - docker rmi --force $(docker images -q $tagname | uniq)
  - if [ $test_status -ne 0 ]; then echo "Test failed"; false; fi
  artifacts:
    when: on_failure
    paths:
    - _logs/
    expire_in: 1 day
  tags:
  - ubuntu # bats is available here in our CI deployments

.deploy_image:
  extends: .trigger_rule
  stage: "deploy"
  script:
  - tagname=$(cat tagname)
  - if [[ $tagname =~ /stash/ ]]; then
      docker pull $tagname;
      version=$(docker run -e MDS_IGNORE_ERRORS=yes --rm $tagname apt-cache show libmfx1 2>/dev/null | grep Version);
      version=${version#Version:};
      version=$(echo $version | sed 's/ //g' | sed 's/[^a-z|A-Z|0-9|.|-]/./g');
      deploytag1="${tagname%/stash*}/$FLAVOR:$CI_PIPELINE_ID-$CI_COMMIT_SHORT_SHA-$version";
      deploytag2="${tagname%/stash*}/$FLAVOR:latest";
      echo "Deploying $tagname as $deploytag1 and $deploytag2";
      docker tag $tagname $deploytag1;
      docker tag $tagname $deploytag2;
      docker push $deploytag1;
      docker push $deploytag2;
      docker rmi --force
        $(docker images -q $tagname | uniq)
        $(docker images -q $deploytag1 | uniq)
        $(docker images -q $deploytag2 | uniq);
    else
      echo "Already deployed on the build stage";
    fi
  tags:
  - builder
  - ubuntu

build:cdn-agama-public:
  extends: .build_image
  variables:
    DOCKERFILE: docker/ubuntu20.04/intel-gfx/Dockerfile
    SAMPLE: cdn
    FLAVOR: public
    ORIGIN: master

build:cdn-agama-master:
  extends: .build_image
  variables:
    DOCKERFILE: docker/ubuntu20.04/intel-gfx-embargo/Dockerfile
    SAMPLE: cdn
    FLAVOR: focal-untested
    ORIGIN: embargo

build:cdn-agama-devel:
  extends: .build_image
  variables:
    DOCKERFILE: docker/ubuntu20.04/intel-gfx-embargo/Dockerfile
    SAMPLE: cdn
    FLAVOR: focal-devel-untested
    ORIGIN: embargo

build:cdn-agama-embargo:
  extends: .build_image
  variables:
    DOCKERFILE: docker/ubuntu20.04/intel-gfx-embargo/Dockerfile
    SAMPLE: cdn
    FLAVOR: focal-embargo-untested
    ORIGIN: embargo

build:edge:
  extends: .build_image
  variables:
    DOCKERFILE: docker/ubuntu20.04/intel-gfx/Dockerfile
    SAMPLE: edge
    FLAVOR: agama
    APT_GRAPHICS_REPO: "https://repositories.intel.com/graphics/ubuntu focal main"
    ORIGIN: master

test:cdn-agama-public-gen9:
  extends: .test_image
  variables:
    SAMPLE: cdn
  dependencies:
  - build:cdn-agama-public
  tags:
  - gen9

test:cdn-agama-public-dg1:
  extends: .test_image
  variables:
    SAMPLE: cdn
  dependencies:
  - build:cdn-agama-public
  tags:
  - dg1

test:cdn-agama-master-gen9:
  extends: .test_image
  variables:
    SAMPLE: cdn
  dependencies:
  - build:cdn-agama-master
  tags:
  - gen9

test:cdn-agama-master-dg1:
  extends: .test_image
  variables:
    SAMPLE: cdn
  dependencies:
  - build:cdn-agama-master
  tags:
  - dg1

test:cdn-agama-devel-dg1:
  extends: .test_image
  variables:
    SAMPLE: cdn
  dependencies:
  - build:cdn-agama-devel
  tags:
  - dg1

test:cdn-agama-embargo-dg1:
  extends: .test_image
  variables:
    SAMPLE: cdn
  dependencies:
  - build:cdn-agama-embargo
  tags:
  - dg1

test:edge-gen11:
  extends: .test_image
  variables:
    SAMPLE: edge
  dependencies:
  - build:edge
  tags:
  - gen11

deploy:cdn-agama-public:
  extends: .deploy_image
  variables:
    SAMPLE: cdn
    FLAVOR: agama
  dependencies:
  - build:cdn-agama-public

deploy:cdn-agama-master:
  extends: .deploy_image
  variables:
    SAMPLE: cdn
    FLAVOR: agama-master
  dependencies:
  - build:cdn-agama-master

deploy:cdn-agama-devel:
  extends: .deploy_image
  variables:
    SAMPLE: cdn
    FLAVOR: agama-devel
  dependencies:
  - build:cdn-agama-devel

deploy:cdn-agama-embargo:
  extends: .deploy_image
  variables:
    SAMPLE: cdn
    FLAVOR: agama
  dependencies:
  - build:cdn-agama-embargo

deploy:edge:
  extends: .deploy_image
  variables:
    SAMPLE: edge
    FLAVOR: agama
  dependencies:
  - build:edge
