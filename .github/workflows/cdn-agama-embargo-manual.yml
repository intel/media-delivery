name: cdn-agama-embargo-manual

on: 
  workflow_dispatch:
    inputs:
      agama_embargo_version:
        description: 'Agama version to use (ex.: agama-ci-embargo-517, agama-ci-prerelease-144)'
        required: true

env:
  BASE_IMAGE: dockerv2-gsae-fm.gfx-assets.fm.intel.com/ubuntu:20.04
  REGISTRY: dockerv2-gsae-fm.gfx-assets.fm.intel.com/solutions
  ARTIFACTORY: https://gfx-assets.fm.intel.com/artifactory
  ARTI_PATH: gfx-media-assets/media_solution/intel-media-delivery/cdn/master
  SYS_M4_PASSWD: ${{ secrets.SYS_M4_PASSWD }}
  FLAVOR: ${{ github.event.inputs.agama_embargo_version }}
  http_proxy: http://proxy-dmz.intel.com:912
  https_proxy: http://proxy-dmz.intel.com:912
  no_proxy: # do NOT add intel.com here - this will break access to repositories.intel.com!

jobs:
  build:
    runs-on: [self-hosted, osgc-solutions, ubuntu, builder]
    outputs:
      tagname: ${{steps.build.outputs.tagname}}
    steps:
    - uses: actions/checkout@v2
    - id: build
      run: |
        tagname="$REGISTRY/intel-media-delivery/cdn/"
        tagname+=embargo/stash/$GITHUB_RUN_ID
        image=$tagname:$FLAVOR
        echo "Building $image ..."
        docker pull $BASE_IMAGE
        docker build \
          $(env | grep -E '_proxy=' | sed 's/^/--build-arg /') \
          --build-arg IMAGE=$BASE_IMAGE \
          --build-arg SAMPLE=cdn \
          --build-arg FLAVOR=$FLAVOR \
          --build-arg USER=sys_m4 \
          --build-arg PASSWD=$SYS_M4_PASSWD \
          --no-cache \
          --force-rm \
          --file docker/ubuntu20.04/intel-gfx-embargo-vpl/Dockerfile.local \
          -t $image \
          .
        docker push $image
        docker rmi --force $(docker images -q $image | uniq)
        echo "::set-output name=tagname::$tagname"

  test-dg1:
    needs: build
    runs-on: [self-hosted, osgc-solutions, dg1, prelim]
    steps:
    - uses: actions/checkout@v2
    - run: |
        image=${{needs.build.outputs.tagname}}:$FLAVOR
        echo "Testing $image ..."
        docker pull $image
        export MDS_IMAGE=$image
        export MDS_LOGS=$(pwd)/_logs
        export MDS_DEMO=cdn
        export TEST_ENCTOOLS=on
        test_status=0
        bats tests/*.bats || test_status=$?
        docker rmi --force $(docker images -q $image | uniq)
        if [ $test_status -ne 0 ]; then echo "Test failed"; false; fi

  test-dg2:
    needs: build
    runs-on: [self-hosted, osgc-solutions, ubuntu, dg2, dual-gpu]
    steps:
    - uses: actions/checkout@v2
    - run: |
        image=${{needs.build.outputs.tagname}}:$FLAVOR
        echo "Testing $image ..."
        docker pull $image
        export MDS_IMAGE=$image
        export MDS_LOGS=$(pwd)/_logs
        export MDS_DEMO=cdn
        export TEST_ENCTOOLS=on
        for d in renderD128 renderD129; do \
          if fgrep -i 0x56a1 /sys/class/drm/$d/device/device; then \
            export DEVICE=/dev/dri/$d; \
          fi; \
        done
        test_status=0
        bats tests/*.bats || test_status=$?
        docker rmi --force $(docker images -q $image | uniq)
        if [ $test_status -ne 0 ]; then echo "Test failed"; false; fi

  deploy:
    needs: [build, test-dg1, test-dg2]
    runs-on: [self-hosted, osgc-solutions, ubuntu, builder]
    steps:
    - uses: actions/checkout@v2
    - run: |
        image=${{needs.build.outputs.tagname}}:$FLAVOR
        echo "Deploying $image ..."
        docker pull $image
        commit=$(git rev-parse --short $GITHUB_SHA)
        tag=$GITHUB_RUN_ID-$commit
        deploytag="${image%/stash*}/$FLAVOR:$tag"
        echo "... as $deploytag ..."
        docker tag $image $deploytag
        docker push $deploytag
        docker rmi --force \
          $(docker images -q $image | uniq) \
          $(docker images -q $deploytag | uniq)
        echo "Posting artifactory asset ..."
        { \
          echo "{"; \
          echo "    \"pipeline\":\"${GITHUB_RUN_ID}\","; \
          echo "    \"commit_id\":\"${commit}\","; \
          echo "    \"docker_image\":\"${deploytag}\""; \
          echo "}"; \
        } > docker_image_info.json
        cat docker_image_info.json
        gta-asset push --no-archive --root-url $ARTIFACTORY $ARTI_PATH $FLAVOR $tag docker_image_info.json
