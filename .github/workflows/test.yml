name: test

on:
  workflow_call:
    inputs:
      repo:
        description: 'Which Github repo to clone?'
        required: false
        type: string
        default: ${{github.repository}}
      pr:
        description: 'Which PR to verify?'
        required: false
        type: string
        default: ''
      image:
        description: 'Which docker image to test?'
        required: true
        type: string
      test_enctools:
        description: 'Test enctools (for all genX)?'
        required: true
        type: string
        # This does not seem currently supported:
        #type: choice
        #default: 'ON'
        #options:
        #- ON
        #- OFF
      on:
        description: 'Test on which runner?'
        required: true
        type: string
      kernel:
        description: 'Run on which kernel?'
        required: true
        type: string

jobs:
  test:
    runs-on: [self-hosted, osgc-solutions, '${{inputs.on}}', '${{inputs.kernel}}' ]
    steps:
    - uses: actions/checkout@v2
      with:
        repository: ${{inputs.repo}}
    - run: |
        pr=${{inputs.pr}}
        if [ -n "$pr" ]; then \
          git fetch origin pull/$pr/head:pr_$pr; \
          git checkout pr_$pr; \
        fi

        image=${{inputs.image}}
        echo "Testing $image ..."
        docker pull $image
        export MDS_IMAGE=$image
        export MDS_LOGS=$(pwd)/_logs
        export MDS_DEMO=cdn
        export TEST_ENCTOOLS=${{inputs.test_enctools}}

        os_ver=$(docker run --rm -e MDS_IGNORE_ERRORS=yes $image cat /etc/lsb-release 2>/dev/null 2>/dev/null | grep DISTRIB_CODENAME)
        os_ver=${os_ver#*=}

        for d in renderD128 renderD129; do \
          if grep -iq '56a1\|56c0' /sys/class/drm/$d/device/device; then \
            export DEVICE=/dev/dri/$d; \
          fi; \
        done
        echo "  TEST_ENCTOOLS=$TEST_ENCTOOLS"
        echo "  DEVICE=$DEVICE"
        test_status=0
        if [[ "$os_ver" = "jammy" ]]; then
          # excluding demo.bats as known to fail on jammy due to missing nginx lua module
          bats tests/tests/consistency.bats \
               tests/demo-bash.bats \
               tests/docs.bats \
               tests/ffmpeg.bats \
               tests/measure-perf.bats \
               tests/measure-quality.bats || test_status=$?;
        else
          bats tests/*.bats || test_status=$?;
        fi
        docker rmi --force $(docker images -q $image | uniq) || true
        if [ $test_status -ne 0 ]; then echo "Test failed"; false; fi

